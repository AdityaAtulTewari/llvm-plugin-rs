name: Windows Test Suite

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  windows-tests:
    name: "LLVM ${{ matrix.llvm-version[0] }} Windows"
    runs-on: windows-latest
    env:
      LLVM_INSTALL_PATH: C:\LLVM
      PLUGINS_PATH: tests\plugins\target\debug
    strategy:
      matrix:
        llvm-version:
          - ["11", "11.0.0", "11-0"]
          - ["12", "12.0.0", "12-0"]
          - ["13", "13.0.0", "13-0"]
          - ["14", "14.0.0", "14-0"]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup LLVM Installation Path
        run: |
          mkdir ${{ env.LLVM_INSTALL_PATH }}
          echo ${{ env.LLVM_INSTALL_PATH }}\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Check LLVM Artifacts In Cache
        id: cache-llvm
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.LLVM_INSTALL_PATH }}\bin\llvm-config.exe
            ${{ env.LLVM_INSTALL_PATH }}\bin\opt.exe
            ${{ env.LLVM_INSTALL_PATH }}\bin\LLVM-C.dll
            ${{ env.LLVM_INSTALL_PATH }}\lib\opt.lib
            ${{ env.LLVM_INSTALL_PATH }}\lib\LLVM-C.lib
            ${{ env.LLVM_INSTALL_PATH }}\include
          key: ${{ runner.os }}-llvm-${{ matrix.llvm-version[0] }}

      - name: Install Patch Utility
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -UserAgent 'GithubCI' -outfile patch.zip  https://downloads.sourceforge.net/project/gnuwin32/patch/2.5.9-7/patch-2.5.9-7-bin.zip
          7z x -oC:\patch patch.zip
          echo C:\patch\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Download LLVM Sources
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          Invoke-WebRequest -UserAgent 'GithubCI' -outfile llvm.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.llvm-version[1] }}/llvm-${{ matrix.llvm-version[1] }}.src.tar.xz
          7z x llvm.src.tar.xz
          7z x llvm.src.tar

      - name: Patch LLVM Sources
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: patch -p1 -i ..\ci\windows\llvm-${{ matrix.llvm-version[0] }}.patch -d llvm-${{ matrix.llvm-version[1] }}.src

      - name: Install Ninja Generator
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: 1.11.0

      - name: Setup MSVC
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Compile & Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          cd llvm-${{ matrix.llvm-version[1] }}.src
          mkdir build
          cd build
          cmake .. `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX=${{ env.LLVM_INSTALL_PATH }} `
            -DLLVM_EXPORT_SYMBOLS_FOR_PLUGINS=ON `
            -DLLVM_ENABLE_TERMINFO=OFF `
            -DLLVM_ENABLE_ZLIB=OFF `
            -DLLVM_INCLUDE_BENCHMARKS=OFF `
            -DLLVM_INCLUDE_DOCS=OFF `
            -DLLVM_INCLUDE_EXAMPLES=OFF `
            -DLLVM_INCLUDE_GO_TESTS=OFF `
            -DLLVM_INCLUDE_RUNTIMES=OFF `
            -DLLVM_INCLUDE_TESTS=OFF `
            -DLLVM_INCLUDE_UTILS=OFF `
            -G Ninja
          ninja install
          copy lib\opt.lib ${{ env.LLVM_INSTALL_PATH }}\lib

      - name: Build Tests
        run: |
          cargo b `
            --manifest-path tests\plugins\Cargo.toml `
            -p plugin* `
            --no-default-features `
            --features target-x86,llvm${{ matrix.llvm-version[2] }}

      - name: Run Tests
        run: |
          opt `
            --load-pass-plugin="${{ env.PLUGINS_PATH }}\plugin1.dll" `
            --passes="mpass,function(fpass)" `
            tests/test.ll `
            -disable-output
          opt `
            --load-pass-plugin="${{ env.PLUGINS_PATH }}\plugin2.dll" `
            --passes="mpass1,mpass2" `
            tests/test.ll `
            -disable-output
          opt `
            --load-pass-plugin="${{ env.PLUGINS_PATH }}\plugin3.dll" `
            --passes="mpass1,mpass2" `
            tests/test.ll `
            -disable-output
          opt `
            --load-pass-plugin="${{ env.PLUGINS_PATH }}\plugin4.dll" `
            --passes="mpass,function(fpass)" `
            tests/test.ll `
            -disable-output
